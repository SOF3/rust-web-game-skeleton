initSidebarItems({"enum":[["ChangeData","A type representing change of value(s) of an element after committed by user (onchange event)."]],"struct":[["AnyScope","Untyped scope used for accessing parent scope"],["ChildrenRenderer","A type used for rendering children html."],["Href","A bridging type for checking `href` attribute value."],["InputData","A type representing data from `oninput` event."],["NodeRef","Wrapped Node reference for later use in Component lifecycle methods."],["Scope","A context which allows sending messages to a component."]],"trait":[["Component","Components are the basic building blocks of the UI in a Yew app. Each Component chooses how to display itself using received props and self-managed state. Components can be dynamic and interactive by declaring messages that are triggered and handled asynchronously. This async update mechanism is inspired by Elm and the actor model used in the Actix framework."],["Properties","Trait for building properties for a component"],["Renderable","Trait for rendering virtual DOM elements"]],"type":[["Children","A type used for accepting children elements in Component::Properties."],["ChildrenWithProps","A type used for accepting children elements in Component::Properties and accessing their props."],["ComponentLink","Link to componentâ€™s scope for creating callbacks."],["Html","A type which expected as a result of `view` function implementation."],["ShouldRender","This type indicates that component should be rendered again."]]});